import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { initializeUser, processReferral, getUserData } from './userManagement.js';

dotenv.config();

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const requiredEnvVars = ['BOT_TOKEN', 'FRONTEND_URL', 'BOT_USERNAME'];
requiredEnvVars.forEach(varName => {
  if (!process.env[varName]) {
    console.error(`Missing required environment variable: ${varName}`);
    process.exit(1);
  }
});

console.log('FRONTEND_URL –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É:', process.env.FRONTEND_URL);
console.log('POSTGRES_URL (–ø–µ—Ä—à—ñ 20 —Å–∏–º–≤–æ–ª—ñ–≤):', process.env.POSTGRES_URL.substring(0, 20) + '...');
console.log('BOT_TOKEN (–ø–µ—Ä—à—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤):', process.env.BOT_TOKEN.substring(0, 10) + '...');

const bot = new TelegramBot(process.env.BOT_TOKEN, {
  webHook: {
    port: process.env.PORT
  }
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('text', async (msg) => {
  try {
    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', msg.text);
    if (msg.text.startsWith('/start')) {
      console.log('–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start');
      await handleStart(msg);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    try {
      await bot.sendMessage(msg.chat.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    } catch (sendError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:', sendError);
    }
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ Telegram API
bot.on('polling_error', (error) => {
  console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—ñ Telegram API:', error);
});

// –û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤
bot.on('callback_query', async (query) => {
  try {
    const chatId = query.message.chat.id;
    const userId = query.from.id;

    if (query.data === 'invite_friends') {
      try {
        const userData = await getUserData(userId);
        if (!userData) {
          throw new Error('User data not found');
        }

        const inviteLink = `https://t.me/${process.env.BOT_USERNAME}?start=${userData.referralCode}`;
        await bot.answerCallbackQuery(query.id);
        await bot.sendMessage(
          chatId,
          `üéÅ –û—Å—å –≤–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${inviteLink}\n\n` +
          `–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–∏–º –∑ –¥—Ä—É–∑—è–º–∏ —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ ${1000} –º–æ–Ω–µ—Ç –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n\n` +
          `–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${userData.coins} –º–æ–Ω–µ—Ç`
        );
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', error);
        await bot.answerCallbackQuery(query.id, {
          text: '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
          show_alert: true
        });
      }
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback_query:', error);
  }
});

// –ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async function handleStart(msg) {
  console.log('–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /start');
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–æ–º
    const keyboard = {
      inline_keyboard: [
        [{
          text: 'üéÆ Play Game',
          web_app: { url: `${process.env.FRONTEND_URL}?userId=${userId}` }
        }],
        [{
          text: 'üë• –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–∑—ñ–≤',
          callback_data: 'invite_friends'
        }]
      ]
    };

    console.log('–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
    console.log('FRONTEND_URL:', process.env.FRONTEND_URL);
    console.log('Keyboard:', JSON.stringify(keyboard));

    // –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    let avatarUrl = null;
    try {
      const photos = await bot.getUserProfilePhotos(userId, { limit: 1 });
      if (photos.total_count > 0) {
        avatarUrl = await bot.getFileLink(photos.photos[0][0].file_id);
      }
    } catch (photoError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é:', photoError);
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try {
      const userData = await initializeUser(
        userId,
        msg.from.first_name,
        msg.from.last_name,
        msg.from.username,
        avatarUrl
      );
      console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π:', userData);

      // –û–±—Ä–æ–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É
      const startParam = msg.text.split(' ')[1];
      if (startParam) {
        try {
          const referralResult = await processReferral(startParam, userId);
          console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –æ–±—Ä–æ–±–ª–µ–Ω–æ:', referralResult);

          if (referralResult.success) {
            await bot.sendMessage(
              chatId,
              `üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å ${referralResult.bonusCoins} –º–æ–Ω–µ—Ç!`
            );
          }
        } catch (refError) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É:', refError);
          if (refError.message !== 'User already referred') {
            await bot.sendMessage(
              chatId,
              '–ù–∞ –∂–∞–ª—å, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
            );
          }
        }
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const welcomeMessage = `
üéÆ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ TWASH COIN!

üí∞ –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${userData.coins} –º–æ–Ω–µ—Ç
üèÜ –í–∞—à —Ä—ñ–≤–µ–Ω—å: ${userData.level}

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É!
      `;

      const sentMessage = await bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: keyboard
      });
      console.log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:', sentMessage);

    } catch (dbError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', dbError);
      await bot.sendMessage(
        chatId,
        '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.'
      );
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /start:', error);
    try {
      await bot.sendMessage(
        chatId,
        '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.'
      );
    } catch (sendError) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:', sendError);
    }
  }
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /start');
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot.getMe().then((botInfo) => {
  console.log("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞:", botInfo);
}).catch((error) => {
  console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞:", error);
});

// WebHook management functions
async function setWebhook() {
  try {
    const webhookUrl = `${process.env.WEBHOOK_URL}/bot${process.env.BOT_TOKEN}`;
    const result = await bot.setWebHook(webhookUrl);
    console.log('Webhook set result:', result);
    return result;
  } catch (error) {
    console.error('Error setting webhook:', error);
    throw error;
  }
}

async function deleteWebhook() {
  try {
    const result = await bot.deleteWebHook();
    console.log('Webhook deleted result:', result);
    return result;
  } catch (error) {
    console.error('Error deleting webhook:', error);
    throw error;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –±–æ—Ç —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
export default bot;
export { setWebhook, deleteWebhook };